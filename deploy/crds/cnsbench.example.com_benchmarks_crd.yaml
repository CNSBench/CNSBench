apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: benchmarks.cnsbench.example.com
spec:
  group: cnsbench.example.com
  names:
    kind: Benchmark
    listKind: BenchmarkList
    plural: benchmarks
    singular: benchmark
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Benchmark is the Schema for the benchmarks API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BenchmarkSpec defines the desired state of Benchmark
            properties:
              actions:
                items:
                  properties:
                    name:
                      type: string
                    runOnceSpec:
                      properties:
                        count:
                          description: How many instances of the object to create.  Multiple
                            instances are all created simultaneously (use the Run
                            Action type to create multiple instances non-simultaneously).
                          type: integer
                        specName:
                          description: Name of ConfigMap that contains the yaml definition
                            of the object to be scaled.  If the object does not exist
                            it will be created. If the ConfigMap contains more than
                            one object, all are created.
                          type: string
                      required:
                      - count
                      - specName
                      type: object
                    runSpec:
                      properties:
                        rateName:
                          type: string
                        specName:
                          description: Name of ConfigMap that contains the yaml definition
                            of the object to be scaled.  If the object does not exist
                            it will be created. If the ConfigMap contains more than
                            one object, all are created.
                          type: string
                      required:
                      - rateName
                      - specName
                      type: object
                    scaleSpec:
                      properties:
                        name:
                          description: Name of the object that will be scaled (object
                            should already exist)
                          type: string
                        rateName:
                          type: string
                        selector:
                          description: Used to select the object that will be scaled
                            (object should already exist) (Unimplemented)
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs.
                                A single {key,value} in the matchLabels map is equivalent
                                to an element of matchExpressions, whose key field
                                is "key", the operator is "In", and the values array
                                contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                        specName:
                          description: Name of ConfigMap that contains the yaml definition
                            of the object to be scaled.  If the object does not exist
                            it will be created.  The ConfigMap should only contain
                            one object.
                          type: string
                      required:
                      - rateName
                      type: object
                  required:
                  - name
                  type: object
                type: array
              rates:
                items:
                  properties:
                    constantIncreaseDecreaseRateSpec:
                      properties:
                        decInterval:
                          type: integer
                        incInterval:
                          type: integer
                        max:
                          type: integer
                        min:
                          type: integer
                      required:
                      - decInterval
                      - incInterval
                      - max
                      - min
                      type: object
                    constantRateSpec:
                      properties:
                        interval:
                          type: integer
                      required:
                      - interval
                      type: object
                    name:
                      type: string
                  required:
                  - name
                  type: object
                type: array
              stopAfter:
                description: Runtime, numactions, ...? For each action have an exit
                  condition? (or each rate?)
                type: string
            required:
            - actions
            type: object
          status:
            description: BenchmarkStatus defines the observed state of Benchmark
            properties:
              runningActions:
                description: This doesn't include RuneOnce actions
                type: integer
              runningRates:
                type: integer
              state:
                type: string
            required:
            - runningActions
            - runningRates
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
