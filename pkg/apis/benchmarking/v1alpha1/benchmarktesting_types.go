package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type IoOpUnit struct {
	// Name of container image to run, defaults to benchmarking/fio:3.18-8
	// +optional
	Image string `json:"image,omitempty"`

	// Name of PVC to use, if not specified creates a new PVC from the storage
	// controller specified in BenchmarkTesting CR
	// +optional
	PVCName string `json:"pvcName,omitempty"`

	// WorkingDir specifies directory inside the container where the PV should be
	// mounted.
	//
	// OutputDir specifies the directory inside the container where the output
	// generated by the testing application should be output - this is where the
	// emptyDir is attached so the controller can collect the output after the
	// test completes.
	//
	// The testing application's configuration should match these directories:
	// e.g. an fio config should set "directory" to be the same as WorkingDir and
	// write_bw_log should be set to a file under OutputDir
	WorkingDir string `json:"workingDir"`
	OutputDir string `json:"outputDir"`

	// In yaml do "config: |\n", then paste the normal config
	//Config string `json:"config"`

	// Name of ConfigMap for IOU config
	ConfigName string `json:"configName"`

	// Command line
	AppCmdline string `json:"appCmdline"`

	// Name of ConfigMap for script
	OutputParser string `json:"outputParser"`

	// Defaults to ubuntu:latest
	// +optional
	ParserImage string `json:"parserImage"`

	// Command line
	ParserCmdline string `json:"parserCmdline"`
}

type SnapshotOpArgsSpec struct {
	SnapshotClass string `json:"snapshotClass"`
	SnapshotTarget string `json:"target"`
}

type ProvisionOpArgsSpec struct {
	Size string `json:"size"`
}

type ControlOpUnit struct {
	// +kubebuilder:validation:Enum=snapshot;provision;reschedule
	Type string `json:"type"`

	// +optional
	SnapshotOpArgs SnapshotOpArgsSpec `json:"snapshotOpArgs"`

	// +optional
	ProvisionOpArgs ProvisionOpArgsSpec `json:"provisionOpArgs"`

	//OpsPerMin uint `json:"opsPerMin"`

	// Time between control ops in seconds
	// +kubebuilder:validation:Minimum=0
	Interval uint `json:"interval"`

	// Time in seconds to delay the start of the control operations.
	StartDelay uint `json:"startDelay,omitempty"`
}

// BenchmarkTestingSpec defines the desired state of BenchmarkTesting
type BenchmarkTestingSpec struct {
	// Name of storage class from which PVs are provisioned.  If not set, each IOU
	// needs to specify which PVC to use.
	// +optional
	StorageClass string `json:"storageClass,omitempty"`

	// +optional
	IoOpUnits []IoOpUnit `json:"ioOpUnits,omitempty"`
	// +optional
	ControlOpUnits []ControlOpUnit `json:"controlOpUnits,omitempty"`
}

// BenchmarkTestingStatus defines the observed state of BenchmarkTesting
type BenchmarkTestingStatus struct {
	PodNames []string `json:"podNames"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BenchmarkTesting is the Schema for the benchmarktestings API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=benchmarktestings,scope=Namespaced
type BenchmarkTesting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BenchmarkTestingSpec   `json:"spec,omitempty"`
	Status BenchmarkTestingStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BenchmarkTestingList contains a list of BenchmarkTesting
type BenchmarkTestingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BenchmarkTesting `json:"items"`
}

func init() {
	SchemeBuilder.Register(&BenchmarkTesting{}, &BenchmarkTestingList{})
}
